{
  "name": "classy",
  "description": "Class system library",
  "version": "0.0.2",
  "repository": {
    "url": "https://github.com/paxa/classy"
  },
  "main": "classy.js",
  "scripts": {
    "test": "node ./tests/index.js"
  },
  "devDependencies": {
    "colors": "0.6.2",
    "glob": "4.0.4",
    "nedb": "~0.10.6",
    "fibers": "~1.0.1"
  },
  "engines": {
    "node": "*"
  },
  "readme": "[![Build Status](https://drone.io/bitbucket.org/paxa/classy/status.png)](https://drone.io/bitbucket.org/paxa/classy/latest)\r\n\r\n# Classy #\r\n\r\n## `'classy/object_extras'`\r\n\r\nUtility functions to have a better touch with objects:\r\n\r\n```js\r\nvar ObjectKit = require('classy/object_extras');\r\nObjectKit.extendGlobal();\r\n\r\n```\r\n\r\n**`extendGlobal`**\r\n\r\nextend global variable `Object`\r\n\r\n```js\r\nObjectKit.extendGlobal();\r\n```\r\n\r\n```js\r\n// iterates object\r\nObject.forEach(obj, function (key, value) {\r\n\r\n});\r\n\r\n// get values as array\r\nvar obj = {type: 'animal', wear: 'wool', lives: 9};\r\nObject.values(obj) // => ['animal', 'wool', 9];\r\n\r\n// more detail type of object\r\nObject.realType(null) // => 'null'\r\nObject.realType(new Date) // => 'date'\r\nObject.realType([]) // => 'array'\r\n\r\n// methods of object\r\nObject.methods(obj);\r\n\r\n// own properties\r\nObject.properties(obj) // -> return own properties\r\n\r\n// all properties of object\r\nObject.allProperties(obj) // -> return all properties of object\r\n\r\n// variables\r\nObject.instance_variables(obj)\r\n\r\n// array of instance variable names\r\nObject.instance_variable_names(obj)\r\n\r\n// same as ruby's ancestors\r\nObject.ancestors(obj) // return array of inherited prototypes\r\n\r\n// check if object is constructor\r\nObject.isConstructor(obj);\r\n\r\n```\r\n\r\nRuby like classes for Node.js\r\n\r\n### Api example\r\n\r\n```js\r\nvar Animal = {\r\n  isAnimal: true,\r\n\r\n};\r\n\r\nvar Cat = Classy.build('Cat', function (proto, mutator) {\r\n  this.extend(Animal);\r\n\r\n  proto.initialize = function() {\r\n    this.birthtime = new Date;\r\n  };\r\n\r\n  mutator.getter(proto, 'age', function() {\r\n    return new Date() - this.birthtime;\r\n  });\r\n\r\n  mutator.aliasProperty(proto, 'new_age', 'age');\r\n\r\n  ['left', 'right'].forEach(function(side) {\r\n    proto[side + 'Hand'] = side + \" hand\";\r\n  });\r\n});\r\n\r\nCat.classEval(function(proto) {\r\n  proto.tailMode = \"down\";\r\n\r\n  proto.tailUp = function () {\r\n    this.tailMode = \"up\";\r\n  };\r\n\r\n  proto.tailDown = function () {\r\n    this.tailMode = \"down\";\r\n  };\r\n\r\n  proto.moveTail = function() {\r\n    this.tailMode = this.tailMode == \"up\" ? \"down\" : \"up\"\r\n  }\r\n});\r\n\r\nvar aCat = new Cat;\r\n\r\nconsole.log('klassName', aCat.klassName);\r\nconsole.log('instance_variables', aCat.instance_variables);\r\nconsole.log('object_id', aCat.object_id);\r\nconsole.log('object_id', (new Cat).object_id);\r\nconsole.log('ancestors', Cat.ancestors);\r\nconsole.log('parentKlass', Cat.parentKlass);\r\nconsole.log('klass', aCat.klass);\r\nconsole.log('Class.klass', Cat.klass);\r\nconsole.log('is_a', aCat.is_a(aCat.klass));\r\nconsole.log('tap', aCat.tap(function() { console.dir(this); }));\r\nconsole.log('inspect', aCat.inspect());\r\nconsole.log('#age', aCat.age);\r\nconsole.log('#new_age', aCat.age);\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/paxa/classy/issues"
  },
  "homepage": "https://github.com/paxa/classy",
  "_id": "classy@0.0.2",
  "dist": {
    "shasum": "2e4610bb1aa69e4da1c1b9b73b60e8db0b0617fd"
  },
  "_resolved": "git://github.com/paxa/classy.git#9b7eef5d97438d3a3a7fb2f008d2d5663532142f",
  "_from": "git://github.com/paxa/classy.git"
}
