{
  "name": "any-db-pool",
  "version": "1.0.3",
  "description": "Any-DB connection pool",
  "main": "index.js",
  "author": {
    "name": "Stephen Sugden",
    "email": "me@stephensugden.com"
  },
  "license": "BSD-2-Clause",
  "scripts": {
    "test": "tape tests/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grncdr/node-any-db-pool.git"
  },
  "bugs": {
    "url": "https://github.com/grncdr/node-any-db-pool/issues"
  },
  "dependencies": {
    "generic-pool": "~2.0.2",
    "any-db-transaction": "~0.0.1",
    "once": "~1.1.1"
  },
  "devDependencies": {
    "tape": "~2.3.2",
    "any-db-fake": "0.0.0"
  },
  "readme": "# any-db-pool - database agnostic connection pool\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db-pool)\n\n## Synopsis\n\n```javascript\nvar ConnectionPool = require('any-db-pool')\nvar adapter = require('any-db-mysql')\n\nvar pool = new ConnectionPool(\n  adapter,\n  { user: 'scott', password: 'tiger' },\n  { min: 5,\n    max: 15,\n    reset: function (conn, done) {\n      conn.query('ROLLBACK', done)\n    }\n  })\n\n// Proxies to mysql's connection.query\nvar q = pool.query('SELECT 1', function (err, res) { })\n```\n\n## Description\n\nThis module contains a database connection pool that can be used with any\ndriver, though it is designed to work well with [any-db compliant\nadapters][any-db-adapter-spec]. If you are writing a library that needs to support multiple database\nbackends (e.g. SQLite3 or Postgres or MySQL) then it's highly encouraged that\nyou add [any-db][any-db] to your `peerDependencies` and **not** this module\ndirectly.\n\n[any-db-adapter-spec]: https://github.com/grncdr/node-any-db-adapter-spec\n\n## Why wouldn't I just use `generic-pool`?\n\n[generic-pool][gpool] is awesome, but it's *very* generic.  This is a Good\nThing for a library with \"generic\" in the name, but not so good for the very\ncommon but slightly more specialized case of pooling stateful SQL database\nconnections.  This library uses `generic-pool` and simply augments it with some\nadded niceties:\n\n* Hooks for initializing and/or resetting connection state when connections are added or returned to the pool.\n* A `query` method that allows queries to be performed without the user needing a reference to a connection object (and potentially leaking that reference).\n\n## API\n\n*Note:* ConnectionPool instances are usually created with the [createPool][] function from [any-db], which automatically selects an [Adapter][] for a given database URL.\n\n```ocaml\nmodule.exports := (Adapter, adapterConfig: Object, PoolConfig) => ConnectionPool\n\nConnectionPool := EventEmitter & {\n  adapter: String,\n  query:   (String, Array?, Continuation<ResultSet>?) => Query,\n  begin:   (Continuation<Transaction>?) => Transaction,\n  acquire: (Continuation<Connection>) => void,\n  release: (Connection) => void,\n  close:   (Continuation<void>?) => void,\n}\n\nPoolConfig := {\n  min: Number?,\n  max: Number?,\n  onConnect: (Connection, ready: Continuation<Connection>) => void\n  reset: (Connection, done: Continuation<void>) => void\n}\n```\n\n### PoolConfig\n\nA `PoolConfig` is generally a plain object with any of the following properties (they are all optional):\n\n - `min` (default `0`) The minimum number of connections to keep open in the pool.\n - `max` (default `10`) The maximum number of connections to keep open in the pool. When this limit is reached further requests for connections will queue waiting for an existing connection to be released back into the pool.\n - `onConnect` Called immediately after a connection is first established. Use this to do one-time setup of new connections. The supplied `Connection` will not be added to the pool until you pass it to the `done` continuation.\n - `reset` Called each time a connection is returned to the pool. Use this to restore a connection to it's original state (e.g. rollback transactions, set the database session vars). If `reset` fails to call the `done` continuation the connection will be lost in limbo.\n\n### ConnectionPool.query\n\n```ocaml\n(String, Array?, Continuation<ResultSet>?) => Query\n```\n\nActs exactly like [Connection.query][] by automatically acquiring a connection\nand releasing it when the query completes.\n\n### ConnectionPool.begin\n\n```ocaml\n(Continuation<Transaction>?) => Transaction\n```\n\nActs exactly like [Connection.begin][], but the underlying\nconnection is returned to the pool when the transaction commits or rolls back.\n\n### ConnectionPool.acquire\n\n```ocaml\n(Continuation<Connection>) => void\n```\n\nRemove a connection from the pool. If you use this method you **must** return\nthe connection back to the pool using [ConnectionPool.release][]\n\n### ConnectionPool.release\n\n```ocaml\n(Connection) => void\n```\n\nReturn a connection to the pool. This should only be called with connections\nyou've manually [acquired](#connectionpoolacquire). You **must not** continue\nto use the connection after releasing it.\n\n### ConnectionPool.close\n\n```ocaml\n(Continuation<void>?) => void\n```\n\nStop giving out new connections, and close all existing database connections as\nthey are returned to the pool.\n\n### ConnectionPool.adapter\n\nThe string name of the adapter used for this connection pool, e.g. `'sqlite3'`.\n\n### ConnectionPool events\n\n * `'acquire'` - emitted whenever `pool.acquire` is called\n * `'release'` - emitted whenever `pool.release` is called\n * `'query', query` - emitted immediately after `.query` is called on a\n   connection via `pool.query`. The argument is a [Query][] object.\n * `'close'` - emitted when the connection pool has closed all of it\n   connections after a call to `close()`.\n\n## Installation\n\n`npm install any-db-pool`\n\n## License\n\nMIT\n\n[gpool]: http://npm.im/generic-pool\n[any-db]: https://github.com/grncdr/node-any-db\n[Adapter]: https://github.com/grncdr/node-any-db-adapter-spec#adapter\n[createPool]: https://github.com/grncdr/node-any-db#exportscreatepool\n[Connection.query]: https://github.com/grncdr/node-any-db-adapter-spec#connectionquery\n[Query]: https://github.com/grncdr/node-any-db-adapter-spec#query\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/grncdr/node-any-db-pool",
  "_id": "any-db-pool@1.0.3",
  "_from": "any-db-pool@~1.0.1"
}
